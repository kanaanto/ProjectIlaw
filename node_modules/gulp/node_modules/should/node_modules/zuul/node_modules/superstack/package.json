{
  "name": "superstack",
  "version": "0.0.4",
  "description": "long stack traces for node.js",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha --ui tdd --reporter list"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/defunctzombie/node-superstack.git"
  },
  "keywords": [
    "stacktrace",
    "long",
    "stack",
    "trace"
  ],
  "author": {
    "name": "Roman Shtylman",
    "email": "shtylman@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/defunctzombie/node-superstack/issues"
  },
  "devDependencies": {
    "mocha": "~1.13.0",
    "after": "~0.8.1"
  },
  "readme": "# superstack [![Build Status](https://travis-ci.org/defunctzombie/node-superstack.png?branch=master)](https://travis-ci.org/defunctzombie/node-superstack)\n\nlong stack traces for node.js over async/io boundaries\n\n## install\n\n```shell\nnpm install superstack\n```\n\n## use\n\nJust require `superstack` in your project. Ideally one of the first requires (see how it works for why)\n\n```js\nvar superstack = require('superstack');\n\nfunction f () {\n    throw new Error('foo');\n}\nsetTimeout(f, Math.random());\nsetTimeout(f, Math.random());\n```\n\nYour stack traces will now extend beyond async call boundaries. From the code above.\n\nBefore superstack\n```\nError: foo\n    at f [as _onTimeout] (.../node-superstack/foobar.js:2:11)\n    at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)\n```\n\nWe have no idea which `setTimeout` call actually caused the error.\n\nAfter\n```\nError: foo\n    at f (/Users/shtylman/projects/node-superstack/foobar.js:4:11)\n    at Timer.listOnTimeout [as ontimeout] (timers.js:110:15)\n    at Object.<anonymous> (/Users/shtylman/projects/node-superstack/foobar.js:7:1)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:901:3\n```\n\nNotice that the stacktrace identifies which of the two `setTimeout` fired first and this caused the error.\n\n### options\n\n#### superstack.empty_frame\n\nBy default, the stacktrace appears as one long stacktrace. If you want to see the superstack framing boundaries set this value to a string and it will appear in the callstack.\n\n#### superstack.async_trace_limit\n\nSet this to a positive number to limit the number of frames superstack will capture. This is how many nested async calls back to report. A values of `-1` means unlimited. Default is `10`.\n\n#### superstack.format_stack\n\nFunction used by superstack to format the stacktrace string. See the implementation for default. The default conforms to the v8 stacktrace strings.\n\n## how it works\n\nSuperstack works by intercepting certain node.js EventEmitter, process, and Timer APIs. By intercepting the api call and injecting a wrapper callback, any error can be captured and additional frame information added via [Error.prepareStackTrace](https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi)\n\nThe following calls are intercepted.\n\n### EventEmitter\n\n* on/addListener\n* once\n* removeListener\n* listeners\n\n### process\n\n* nextTick\n* _nextDomainTick\n\n### globals\n\n* setTimeout\n* setInterval\n* setImmediate\n\n## testing\n\nIf you find an instance of usage that is not properly captured, please open an issue and provide a testcase to reproduce.\n\nThe usual `npm test` can be run. A more rigorous set of tests can be run by running the `runme.sh` script in `test/modules`. It will clone a few popular node.js repos and run their test suits with superstack enabled. This helps ensure that there are limited side effects.\n\n## References\n\nThanks to [mattinsler/longjohn](https://github.com/mattinsler/longjohn) and [tlrobinson/long-stack-traces](https://github.com/tlrobinson/long-stack-traces) for the ideas and code. Longjohn code is MIT licensed.\n\nAlso relevant a pdf on the initial idea of [long stack traces](http://nodejs.org/illuminati0.pdf) via an EventSource.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/defunctzombie/node-superstack",
  "_id": "superstack@0.0.4",
  "dist": {
    "shasum": "6fe87b7913e0fd748ab33e333b5ae87eb020935c",
    "tarball": "http://registry.npmjs.org/superstack/-/superstack-0.0.4.tgz"
  },
  "_from": "superstack@0.0.4",
  "_npmVersion": "1.3.14",
  "_npmUser": {
    "name": "shtylman",
    "email": "shtylman@gmail.com"
  },
  "maintainers": [
    {
      "name": "shtylman",
      "email": "shtylman@gmail.com"
    }
  ],
  "_shasum": "6fe87b7913e0fd748ab33e333b5ae87eb020935c",
  "_resolved": "https://registry.npmjs.org/superstack/-/superstack-0.0.4.tgz"
}
